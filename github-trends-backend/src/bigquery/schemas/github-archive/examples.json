{
  "baseEventsQuery": "DECLARE start_month_and_day STRING DEFAULT 'mmdd'; -- replace with actual month (number 01, 02, ...) and day (number 01, 02, ...)\nDECLARE end_month_and_day   STRING DEFAULT 'mmdd'; -- replace with actual month (number 01, 02, ...) and day (number 01, 02, ...)\n\nWITH events AS (\n  SELECT\n    id,\n    type,\n    actor.login AS actor_login,\n    repo.name AS repo_name,\n    COALESCE(org.login, SPLIT(repo.name, '/')[OFFSET(0)]) AS org_login,\n    payload,\n    created_at\n  FROM `githubarchive.day.yyyy*` -- replace yyyy with year number\n  WHERE _TABLE_SUFFIX BETWEEN start_month_and_day AND end_month_and_day\n)\n-- Replace the SELECT below with any of the query bodies that follow\nSELECT 1;",
  "description": "This events CTE must be used with any of the queries that follow below.",
  "required": true,
  "queries": {
    "crossCutting": [
      { "id": "eventVolumeByDay", "description": "Event volume by day", "sql": "SELECT DATE(created_at) AS day, COUNT(*) AS events_count\nFROM events\nGROUP BY day\nORDER BY day;" },
      { "id": "eventVolumeByHourAndDOW", "description": "Event volume by hour-of-day and day-of-week", "sql": "SELECT\n  EXTRACT(DAYOFWEEK FROM created_at) AS dow,\n  EXTRACT(HOUR FROM created_at) AS hour,\n  COUNT(*) AS events_count\nFROM events\nGROUP BY dow, hour\nORDER BY dow, hour;" },
      { "id": "topActorsByEvents", "description": "Top actors (users) by total events", "sql": "SELECT actor_login, COUNT(*) AS events_count\nFROM events\nGROUP BY actor_login\nORDER BY events_count DESC\nLIMIT 100;" },
      { "id": "activityByEventTypePerRepo", "description": "Activity breakdown by event type per repo", "sql": "SELECT repo_name, type, COUNT(*) AS events_count\nFROM events\nGROUP BY repo_name, type\nORDER BY events_count DESC\nLIMIT 20;" },
      { "id": "newVsReturningActors", "description": "New vs returning actors (churn proxy) â€” only works for intervals > 1 day", "sql": "first_seen AS (\n  SELECT actor_login, MIN(DATE(created_at)) AS first_day\n  FROM events\n  GROUP BY actor_login\n)\nSELECT\n  DATE(e.created_at) AS day,\n  SUM(CASE WHEN f.first_day = DATE(e.created_at) THEN 1 ELSE 0 END) AS new_actors_events,\n  SUM(CASE WHEN f.first_day < DATE(e.created_at) THEN 1 ELSE 0 END) AS returning_actors_events\nFROM events e\nJOIN first_seen f USING (actor_login)\nGROUP BY day\nORDER BY day;" }
    ],
    "stars": [
      { "id": "topStarredRepos", "description": "Top starred repos in period", "sql": "SELECT repo_name, COUNT(*) AS stars\nFROM events\nWHERE type = 'WatchEvent' AND JSON_VALUE(payload, '$.action') = 'started'\nGROUP BY repo_name\nORDER BY stars DESC\nLIMIT 100;" },
      { "id": "starGrowthDaily", "description": "Star growth over time per repo (daily)", "sql": "SELECT\n  repo_name,\n  DATE(created_at) AS day,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'started') AS stars\nFROM events\nWHERE type = 'WatchEvent'\nGROUP BY repo_name, day\nORDER BY day, stars DESC;" },
      { "id": "starToForkRatio", "description": "Star-to-fork ratio per repo", "sql": "stars AS (\n  SELECT repo_name, COUNT(*) AS stars\n  FROM events\n  WHERE type = 'WatchEvent' AND JSON_VALUE(payload, '$.action') = 'started'\n  GROUP BY repo_name\n), forks AS (\n  SELECT repo_name, COUNT(*) AS forks\n  FROM events\n  WHERE type = 'ForkEvent'\n  GROUP BY repo_name\n)\nSELECT\n  COALESCE(s.repo_name, f.repo_name) AS repo_name,\n  s.stars,\n  f.forks,\n  SAFE_DIVIDE(s.stars, f.forks) AS star_to_fork_ratio\nFROM stars s\nFULL JOIN forks f ON s.repo_name = f.repo_name\nORDER BY s.stars DESC, star_to_fork_ratio DESC\nLIMIT 100;" }
    ],
    "forks": [
      { "id": "topForkedRepos", "description": "Top forked repos", "sql": "SELECT repo_name, COUNT(*) AS forks\nFROM events\nWHERE type = 'ForkEvent'\nGROUP BY repo_name\nORDER BY forks DESC\nLIMIT 100;" },
      { "id": "forkGrowthDaily", "description": "Fork growth over time (daily)", "sql": "SELECT repo_name, DATE(created_at) AS day, COUNT(*) AS forks\nFROM events\nWHERE type = 'ForkEvent'\nGROUP BY repo_name, day\nORDER BY forks DESC;" }
    ],
    "pushes": [
      { "id": "commitsPerRepo", "description": "Commits per repo (sum of payload.size)", "sql": "SELECT repo_name, SUM(CAST(JSON_VALUE(payload, '$.size') AS INT64)) AS commits\nFROM events\nWHERE type = 'PushEvent'\nGROUP BY repo_name\nORDER BY commits DESC\nLIMIT 100;" },
      { "id": "topCommittersPerRepo", "description": "Top committers per repo", "sql": "SELECT repo_name, actor_login, SUM(CAST(JSON_VALUE(payload, '$.size') AS INT64)) AS commits\nFROM events\nWHERE type = 'PushEvent'\nGROUP BY repo_name, actor_login\nORDER BY commits DESC\nLIMIT 200;" },
      { "id": "avgCommitsPerPush", "description": "Average commits per push per repo", "sql": "SELECT\n  repo_name,\n  AVG(CAST(JSON_VALUE(payload, '$.size') AS FLOAT64)) AS avg_commits_per_push,\n  COUNT(*) AS pushes\nFROM events\nWHERE type = 'PushEvent'\nGROUP BY repo_name\nHAVING pushes >= 10\nORDER BY avg_commits_per_push DESC\nLIMIT 100;" },
      { "id": "commitActivityHeatmap", "description": "Commit activity heatmap (hour/day)", "sql": "SELECT\n  EXTRACT(DAYOFWEEK FROM created_at) AS dow,\n  EXTRACT(HOUR FROM created_at) AS hour,\n  SUM(CAST(JSON_VALUE(payload, '$.size') AS INT64)) AS commits\nFROM events\nWHERE type = 'PushEvent'\nGROUP BY dow, hour\nORDER BY dow, hour;" }
    ],
    "issues": [
      { "id": "issuesOpenedClosedDailyPopularRepos", "description": "Issues opened vs closed per day per repo - for popular repos", "sql": "stars AS (\n  SELECT repo_name, COUNT(*) AS stars\n  FROM events\n  WHERE type = 'WatchEvent' AND JSON_VALUE(payload, '$.action') = 'started'\n  GROUP BY repo_name\n)\nSELECT\n  events.repo_name,\n  DATE(created_at) AS day,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'opened') AS opened,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'closed') AS closed,\n  MAX(s.stars) AS stars\nFROM events\nFULL JOIN stars s ON s.repo_name = events.repo_name\nWHERE type = 'IssuesEvent'\nGROUP BY repo_name, day\nORDER BY day, stars DESC;" },
      { "id": "medianTimeToCloseIssuesPopularRepos", "description": "Median time-to-close issues per repo - for popular repos", "sql": "stars AS (\n  SELECT repo_name, COUNT(*) AS stars\n  FROM events\n  WHERE type = 'WatchEvent' AND JSON_VALUE(payload, '$.action') = 'started'\n  GROUP BY repo_name\n),\nclosed_issues AS (\n  SELECT\n    e.repo_name,\n    TIMESTAMP(JSON_VALUE(e.payload, '$.issue.created_at')) AS issue_created_at,\n    TIMESTAMP(JSON_VALUE(e.payload, '$.issue.closed_at')) AS issue_closed_at\n  FROM events e\n  JOIN stars s\n    ON e.repo_name = s.repo_name\n  WHERE e.type = 'IssuesEvent'\n    AND JSON_VALUE(e.payload, '$.action') = 'closed'\n)\nSELECT\n  repo_name,\n  APPROX_QUANTILES(TIMESTAMP_DIFF(issue_closed_at, issue_created_at, HOUR), 100)[OFFSET(50)] AS median_hours_to_close,\n  COUNT(*) AS closed_count\nFROM closed_issues\nGROUP BY repo_name\nHAVING closed_count >= 5\nORDER BY median_hours_to_close;" }
    ],
    "issueComments": [
      { "id": "mostDiscussedRepos", "description": "Most discussed repos (comments count)", "sql": "SELECT repo_name, COUNT(*) AS comments\nFROM events\nWHERE type = 'IssueCommentEvent'\nGROUP BY repo_name\nORDER BY comments DESC\nLIMIT 100;" },
      { "id": "topCommenters", "description": "Top commenters", "sql": "SELECT actor_login, COUNT(*) AS comments\nFROM events\nWHERE type = 'IssueCommentEvent'\nGROUP BY actor_login\nORDER BY comments DESC\nLIMIT 100;" }
    ],
    "pullRequests": [
      { "id": "prsByDayAndMergeRate", "description": "PRs opened/closed/merged per day per repo + merge rate", "sql": "SELECT\n  repo_name,\n  DATE(created_at) AS day,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'opened') AS opened,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'closed') AS closed,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'closed' AND CAST(JSON_VALUE(payload, '$.pull_request.merged') AS BOOL)) AS merged,\n  SAFE_DIVIDE(\n    COUNTIF(JSON_VALUE(payload, '$.action') = 'closed' AND CAST(JSON_VALUE(payload, '$.pull_request.merged') AS BOOL)),\n    NULLIF(COUNTIF(JSON_VALUE(payload, '$.action') = 'opened'), 0)\n  ) AS merge_rate\nFROM events\nWHERE type = 'PullRequestEvent'\nGROUP BY repo_name, day\nORDER BY day, merged DESC;" },
      { "id": "medianHoursToMerge", "description": "Median hours to merge", "sql": "WITH merged AS (\n  SELECT\n    repo_name,\n    TIMESTAMP(JSON_VALUE(payload, '$.pull_request.created_at')) AS pr_created_at,\n    TIMESTAMP(JSON_VALUE(payload, '$.pull_request.merged_at')) AS pr_merged_at\n  FROM events\n  WHERE type = 'PullRequestEvent'\n    AND JSON_VALUE(payload, '$.action') = 'closed'\n    AND CAST(JSON_VALUE(payload, '$.pull_request.merged') AS BOOL)\n)\nSELECT\n  repo_name,\n  APPROX_QUANTILES(TIMESTAMP_DIFF(pr_merged_at, pr_created_at, HOUR), 100)[OFFSET(50)] AS median_hours_to_merge,\n  COUNT(*) AS merged_count\nFROM merged\nGROUP BY repo_name\nHAVING merged_count >= 5\nORDER BY median_hours_to_merge;" },
      { "id": "firstTimePRContributors", "description": "First-time PR contributors (no prior PRs to repo before window)", "sql": "opened AS (\n  SELECT repo_name, actor_login, created_at\n  FROM events\n  WHERE type = 'PullRequestEvent' AND JSON_VALUE(payload, '$.action') = 'opened'\n),\nprior AS (\n  SELECT\n    repo.name AS repo_name,\n    actor.login AS actor_login\n  FROM `githubarchive.day.*`\n  WHERE _TABLE_SUFFIX < start_date\n    AND type = 'PullRequestEvent'\n    AND JSON_VALUE(payload, '$.action') = 'opened'\n  GROUP BY repo_name, actor_login\n)\nSELECT\n  o.repo_name,\n  COUNT(DISTINCT o.actor_login) AS first_time_pr_authors\nFROM opened o\nLEFT JOIN prior p\n  ON o.repo_name = p.repo_name AND o.actor_login = p.actor_login\nWHERE p.actor_login IS NULL\nGROUP BY repo_name\nORDER BY first_time_pr_authors DESC\nLIMIT 100;" }
    ],
    "releases": [
      { "id": "releasesPerRepoDaily", "description": "Releases per repo over time (daily)", "sql": "SELECT repo_name, DATE(created_at) AS day, COUNT(*) AS releases\nFROM events\nWHERE type = 'ReleaseEvent' AND JSON_VALUE(payload, '$.action') = 'published'\nGROUP BY repo_name, day\nORDER BY day, releases DESC;" },
      { "id": "avgReleaseCadenceDays", "description": "Average release cadence (days between releases)", "sql": "rels AS (\n  SELECT repo_name, created_at\n  FROM events\n  WHERE type = 'ReleaseEvent' AND JSON_VALUE(payload, '$.action') = 'published'\n),\ngaps AS (\n  SELECT\n    repo_name,\n    created_at,\n    LAG(created_at) OVER (PARTITION BY repo_name ORDER BY created_at) AS prev_created_at\n  FROM rels\n)\nSELECT\n  repo_name,\n  AVG(TIMESTAMP_DIFF(created_at, prev_created_at, DAY)) AS avg_days_between_releases,\n  COUNT(*) AS releases_count\nFROM gaps\nWHERE prev_created_at IS NOT NULL\nGROUP BY repo_name\nHAVING releases_count >= 3\nORDER BY releases_count DESC, avg_days_between_releases;" },
      { "id": "commitsVsReleasesByDay", "description": "commits vs releases by day (joined series)", "sql": "comm AS (\n  SELECT DATE(created_at) AS day, SUM(CAST(JSON_VALUE(payload, '$.size') AS INT64)) AS commits\n  FROM events\n  WHERE type = 'PushEvent'\n  GROUP BY day\n),\nrels AS (\n  SELECT DATE(created_at) AS day, COUNT(*) AS releases\n  FROM events\n  WHERE type = 'ReleaseEvent' AND JSON_VALUE(payload, '$.action') = 'published'\n  GROUP BY day\n)\nSELECT\n  COALESCE(c.day, r.day) AS day,\n  c.commits,\n  r.releases\nFROM comm c\nFULL JOIN rels r USING (day)\nORDER BY day;" }
    ],
    "repositoryLifecycle": [
      { "id": "newReposPerOrgOverTime", "description": "New repos per org over time", "sql": "SELECT\n  org_login,\n  DATE(created_at) AS day,\n  COUNTIF(JSON_VALUE(payload, '$.ref_type') = 'repository' OR JSON_VALUE(payload, '$.ref_type') IS NULL) AS repos_created\nFROM events\nWHERE type = 'CreateEvent'\nGROUP BY org_login, day\nORDER BY day, repos_created DESC;" },
      { "id": "branchTagCreationCounts", "description": "Branch/tag creation counts", "sql": "SELECT\n  repo_name,\n  DATE(created_at) AS day,\n  COUNTIF(JSON_VALUE(payload, '$.ref_type') = 'branch') AS branches_created,\n  COUNTIF(JSON_VALUE(payload, '$.ref_type') = 'tag') AS tags_created\nFROM events\nWHERE type = 'CreateEvent'\nGROUP BY repo_name, day\nORDER BY day, branches_created + tags_created DESC;" }
    ],
    "membership": [
      { "id": "collaboratorAdditions", "description": "Collaborator additions per repo/org", "sql": "SELECT\n  repo_name,\n  org_login,\n  COUNTIF(JSON_VALUE(payload, '$.action') = 'added') AS collaborators_added\nFROM events\nWHERE type = 'MemberEvent'\nGROUP BY repo_name, org_login\nORDER BY collaborators_added DESC\nLIMIT 200;" }
    ]
  }
}
